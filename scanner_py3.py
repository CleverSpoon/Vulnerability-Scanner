#!/usr/bin/env python
import sys

import requests
import re
import urllib.parse as urlparse
from urllib.parse import urljoin

from bs4 import BeautifulSoup
import colorama
from colorama import Fore, Style


class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links
        self.link_vulnerability_list = []
        self.form_vulnerability_list = []
        self.link_vuln_count = 0
        self.form_vuln_count = 0
        self.sql_link_vuln_count = 0
        self.sql_form_vuln_count = 0
        self.login_links_list = []
        self.admin_links_list = []

    def extract_links_from(self, url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content.decode(errors='ignore'))

    def crawl(self, url=None):
        if url == None:
            url = self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urlparse.urljoin(url, link)

            if "#" in link:
                link = link.split("#")[0]
            if "mailto" in link:
                link = self.target_url

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                if "login" in link:
                    self.login_links_list.append(link)
                if "admin" in link:
                    self.admin_links_list.append(link)
                self.target_links.append(link)
                print("\r " + str(len(self.target_links)) + " Links Crawled ", end=''),
                sys.stdout.flush()
                #print(link)
                self.crawl(link)

    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, "html.parser", from_encoding="iso-8859-1")
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value
            post_data[input_name] = input_value
        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                #print("[+] Testing form in " + link)
                # is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                # if is_vulnerable_to_xss:
                #     self.form_vuln_count = self.form_vuln_count + 1
                #     print(Fore.BLUE + "[" + str(self.form_vuln_count) + "]" + "[***FORM VULNERABILITY***] XSS Vulnerability discovered in " + link + " in the following form:")
                #     print(Style.RESET_ALL)
                #     self.form_vulnerability_list.append(link)
                #     # print("\r" + str(len(self.form_vulnerability_list)) + " Form Vulns Found ", end='\r\n'),
                #     # sys.stdout.flush()
                #     #print(form)

                is_vulnerable_to_sql = self.test_sql_injection_in_form(form, link)
                if is_vulnerable_to_sql:
                    print(link + " is vulnerable to SQL")
                    self.sql_form_vuln_count = self.sql_form_vuln_count + 1

            # if "=" in link:
                #print("[+] Testing " + link)
                # is_vulnerable_to_xss = self.test_xss_in_link(link)
                # if is_vulnerable_to_xss:
                #     self.link_vuln_count = self.link_vuln_count + 1
                #     print(Fore.GREEN + "[" + str(self.link_vuln_count) + "]" +"[***LINK VULNERABILITY***] Discovered XSS Vulnerability in " + link)
                #     print(Style.RESET_ALL)
                #     self.link_vulnerability_list.append(link)

                # is_vulnerable_to_sql = self.test_sql_injection_in_link(link)
                # if is_vulnerable_to_sql:
                #     print("VULNERABLE TO SQL IN LINK" + link)
                #     self.sql_link_vuln_count = self.sql_link_vuln_count + 1

                    # print("\r" + str(len(self.link_vulnerability_list)) + " Link Vulns Found ", end=''),
                    # sys.stdout.flush()

    def test_xss_in_link(self, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return bytes(xss_test_script, 'utf-8') in response.content

    def test_xss_in_form(self, form, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        return bytes(xss_test_script, 'utf-8') in response.content

    def test_sql_injection_in_form(self, form, url):
        sql_test_script = "'"
        response = self.submit_form(form, sql_test_script, url)
        if "error in your SQL syntax" in str(response.content):
            return True

    def test_sql_injection_in_link(self, url):
        payload = "'"
        payload_url = url + payload
        print("PAYLOAD: " + payload_url)
        response = self.session.get(payload_url)
        if "internal server error" in str(response.content) or "sql syntax" in str(response.content):
            return True







