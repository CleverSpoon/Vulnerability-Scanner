#!/usr/bin/env python
import scanner_py3
import colorama
from colorama import Fore, Style
import requests

target_url = "http://192.168.188.129/mutillidae/"
links_to_ignore = ["http://192.168.188.129/dvwa/logout.php"]
data_dict = {"username": "admin", "password": "password", "Login": "submit"}


vuln_scanner = scanner_py3.Scanner(target_url, links_to_ignore)
vuln_scanner.session.post("http://192.168.188.129/dvwa/login.php", data=data_dict)


def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-v", "--verbose", dest="verbose", help="Request Verbose Output")
    parser.add_option("-l", "--location", dest="location", help="The location of the file you wish to inject.")
    (options, arguments) = parser.parse_args()
    # if not options.type:
    #     parser.error("[-] Please specify the file type you want to replace, use --help for more info")
    # elif not options.location:
    #     parser.error("[-] Please specify the location of the file you want to inject, use --help for more info")
    return options


def show_summary():
    link_count = len(vuln_scanner.target_links)
    print(Fore.RED + str(link_count) + " Links Successfully Scanned")
    print(Style.RESET_ALL)
    print(str(vuln_scanner.link_vuln_count) + " Link Vulnerabilities Found")
    print(str(vuln_scanner.form_vuln_count) + " Form Vulnerabilities Found")
    print(str(vuln_scanner.sql_link_vuln_count) + " SQL Link Vulnerabilities Found")
    print(str(vuln_scanner.sql_form_vuln_count) + " SQL Form Vulnerabilities Found")
    print("\nPossible Login links found: \n")
    for link in vuln_scanner.login_links_list:
        print(link)
    print("\nPossible Administrator links found:\n")
    for link in vuln_scanner.admin_links_list:
        print(link)
    print("\nForm Vulnerabilities Found in:\n")
    for vulnerability in vuln_scanner.form_vulnerability_list:
        print(vulnerability)
    print("\nLink Vulnerabilities Found in:\n")
    for vulnerability in vuln_scanner.link_vulnerability_list:
        print(vulnerability)


print(Fore.MAGENTA + "\nCrawling Started...\n" + Style.RESET_ALL)
#vuln_scanner.test_sql_injection_in_link(target_url)
# try:
print("Crawling " + vuln_scanner.target_url)
vuln_scanner.crawl()
print(Fore.MAGENTA + "\n\nDONE.\n" + Style.RESET_ALL)
# except requests.exceptions.InvalidSchema:
#     pass
print(Fore.YELLOW + "\nScanning for Vulnerabilities...\n" + Style.RESET_ALL)
vuln_scanner.run_scanner()
print(Fore.YELLOW + "DONE.\n" + Style.RESET_ALL)
show_summary()

